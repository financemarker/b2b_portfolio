from backend.schemas.connect import ConnectResponse
from backend.services.connect.brokers.tinkoff_api import TinkoffApi
from backend.services.connect.brokers.mock_file import MockFile

# üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
BROKER_REGISTRY = {
    "tinkoff_api": TinkoffApi(),
    "mock_file": MockFile(),
}


def handle_connect(broker_code: str, payload: dict) -> ConnectResponse:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π –±—Ä–æ–∫–µ—Ä."""
    broker = BROKER_REGISTRY.get(broker_code)
    if not broker:
        raise Exception(f"Broker '{broker_code}' not found")

    result = broker.connect(**payload)

    if not isinstance(result, (dict, ConnectResponse)):
        raise Exception("Invalid response format")

    return result
